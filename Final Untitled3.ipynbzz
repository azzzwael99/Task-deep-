{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNCtXwSgUx4unnNf8sLDWgO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"RfQEOQvnOG2Q","executionInfo":{"status":"ok","timestamp":1742569340259,"user_tz":-120,"elapsed":12798,"user":{"displayName":"Azza abdelaziz","userId":"08770813708774899615"}}},"outputs":[],"source":["import os\n","import numpy as np\n","import cv2\n","from sklearn.model_selection import train_test_split\n","import kagglehub\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, LSTM, Dense, TimeDistributed, Dropout"]},{"cell_type":"code","source":["dataset_path = kagglehub.dataset_download(\"ismailnasri20/driver-drowsiness-dataset-ddd\")\n","data_path = os.path.join(dataset_path, \"Driver Drowsiness Dataset (DDD)\")\n","\n","if not os.path.exists(data_path):\n","    raise FileNotFoundError(f\"Path {data_path} not found!\")\n","\n","print(\"Files and folders in data_path:\", os.listdir(data_path))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hHGEFwyHObQP","executionInfo":{"status":"ok","timestamp":1742569408929,"user_tz":-120,"elapsed":68586,"user":{"displayName":"Azza abdelaziz","userId":"08770813708774899615"}},"outputId":"ee06acbe-26de-4ae1-e47d-0d51678f49b1"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading from https://www.kaggle.com/api/v1/datasets/download/ismailnasri20/driver-drowsiness-dataset-ddd?dataset_version_number=1...\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 2.58G/2.58G [00:32<00:00, 85.9MB/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting files...\n"]},{"output_type":"stream","name":"stderr","text":["\n"]},{"output_type":"stream","name":"stdout","text":["Files and folders in data_path: ['Drowsy', 'Non Drowsy']\n"]}]},{"cell_type":"code","source":["classes = [\"Drowsy\", \"Non Drowsy\"]\n","class_mapping = {\"Drowsy\": 1, \"Non Drowsy\": 0}  # 1 = Drowsy, 0 = Awake\n","frame_skip = 10\n","img_size = (32, 32)"],"metadata":{"id":"Xf44uTZpOgTl","executionInfo":{"status":"ok","timestamp":1742569408954,"user_tz":-120,"elapsed":8,"user":{"displayName":"Azza abdelaziz","userId":"08770813708774899615"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["def extract_frames(video_path, frame_skip=frame_skip):\n","    frames = []\n","    cap = cv2.VideoCapture(video_path)\n","\n","    if not cap.isOpened():\n","        print(f\"Error: Unable to open video {video_path}\")\n","        return frames\n","\n","    frame_count = 0\n","    while True:\n","        ret, frame = cap.read()\n","        if not ret:\n","            break\n","\n","        if frame_count % frame_skip == 0:\n","            frame = cv2.resize(frame, img_size) / 255.0  # تصغير وتطبيع الصورة\n","            frames.append(frame)\n","\n","        frame_count += 1\n","\n","    cap.release()\n","    return frames"],"metadata":{"id":"OS-hlSBPOhRK","executionInfo":{"status":"ok","timestamp":1742569408968,"user_tz":-120,"elapsed":6,"user":{"displayName":"Azza abdelaziz","userId":"08770813708774899615"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def load_video_data(data_path):\n","    X, y = [], []\n","\n","    for class_name in classes:\n","        class_path = os.path.join(data_path, class_name)\n","        if not os.path.exists(class_path):\n","            print(f\"Warning: Folder {class_name} not found, skipping...\")\n","            continue\n","\n","        for video_name in os.listdir(class_path):\n","            video_path = os.path.join(class_path, video_name)\n","            frames = extract_frames(video_path, frame_skip)\n","\n","            if not frames:\n","                print(f\"Warning: No frames extracted from {video_path}\")\n","                continue\n","\n","            X.append(frames)\n","            y.append(class_mapping[class_name])\n","\n","    return np.array(X), np.array(y)\n","\n","X, y = load_video_data(data_path)\n","\n","if X.shape[0] == 0:\n","    raise ValueError(\"No data found! Check the dataset path and files.\")\n","\n","print(\"Data shape after loading:\", X.shape, y.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"03FLclcCOj_J","executionInfo":{"status":"ok","timestamp":1742569626008,"user_tz":-120,"elapsed":211603,"user":{"displayName":"Azza abdelaziz","userId":"08770813708774899615"}},"outputId":"a643587c-66f1-44ff-bc4b-1107da77a09a"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Data shape after loading: (41793, 1, 32, 32, 3) (41793,)\n"]}]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","print(\"Data successfully split!\")\n","print(\"Training samples:\", X_train.shape[0])\n","print(\"Testing samples:\", X_test.shape[0])\n","\n","if len(X_train) == 0 or len(y_train) == 0:\n","    raise ValueError(\"Insufficient training data!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S0rhOO2zOm4x","executionInfo":{"status":"ok","timestamp":1742569627104,"user_tz":-120,"elapsed":1106,"user":{"displayName":"Azza abdelaziz","userId":"08770813708774899615"}},"outputId":"9d362d6d-4153-4ba8-8ea9-5ad03d567f08"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Data successfully split!\n","Training samples: 33434\n","Testing samples: 8359\n"]}]},{"cell_type":"code","source":["model = Sequential([\n","    TimeDistributed(Conv2D(16, (3,3), activation='relu', padding='same'), input_shape=(10, 32, 32, 3)),\n","    TimeDistributed(MaxPooling2D((2,2))),\n","    TimeDistributed(Conv2D(32, (3,3), activation='relu', padding='same')),\n","    TimeDistributed(MaxPooling2D((2,2))),\n","    TimeDistributed(Flatten()),\n","\n","    LSTM(32, return_sequences=True),\n","    LSTM(16),\n","    Dropout(0.3),\n","    Dense(16, activation='relu'),\n","    Dense(1, activation='sigmoid')\n","])\n","\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uNtGuFcwOpim","executionInfo":{"status":"ok","timestamp":1742569627306,"user_tz":-120,"elapsed":197,"user":{"displayName":"Azza abdelaziz","userId":"08770813708774899615"}},"outputId":"83f5f63b-3474-4cc6-c68c-d70c836f4917"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/wrapper.py:27: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(**kwargs)\n"]}]},{"cell_type":"code","source":["epochs = 3\n","batch_size = 8\n","\n","history = model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pkGhECVLOrnw","executionInfo":{"status":"ok","timestamp":1742569935934,"user_tz":-120,"elapsed":308618,"user":{"displayName":"Azza abdelaziz","userId":"08770813708774899615"}},"outputId":"797695b8-fd58-4150-fa74-ef254e77f8a3"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/3\n","\u001b[1m4180/4180\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m79s\u001b[0m 17ms/step - accuracy: 0.8976 - loss: 0.2071 - val_accuracy: 0.9994 - val_loss: 0.0042\n","Epoch 2/3\n","\u001b[1m4180/4180\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m92s\u001b[0m 20ms/step - accuracy: 0.9973 - loss: 0.0107 - val_accuracy: 0.9992 - val_loss: 0.0034\n","Epoch 3/3\n","\u001b[1m4180/4180\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m136s\u001b[0m 18ms/step - accuracy: 0.9989 - loss: 0.0047 - val_accuracy: 0.9984 - val_loss: 0.0057\n"]}]},{"cell_type":"code","source":["loss, acc = model.evaluate(X_test, y_test)\n","print(f\"Test accuracy: {acc:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7DgeeJGIOtvL","executionInfo":{"status":"ok","timestamp":1742569941780,"user_tz":-120,"elapsed":5819,"user":{"displayName":"Azza abdelaziz","userId":"08770813708774899615"}},"outputId":"a6bfff7d-5c53-43a4-b818-6f31b6fdb58d"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m262/262\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.9983 - loss: 0.0057\n","Test accuracy: 1.00\n"]}]},{"cell_type":"code","source":["import random\n","\n","test_class = random.choice([\"Drowsy\", \"Non Drowsy\"])\n","test_video_name = random.choice(os.listdir(os.path.join(data_path, test_class)))\n","test_video_path = os.path.join(data_path, test_class, test_video_name)\n","\n","print(f\"Testing on video: {test_video_name} (Actual: {test_class})\")\n","\n","test_frames = extract_frames(test_video_path)\n","\n","if len(test_frames) == 0:\n","    raise ValueError(\"No frames extracted from the test video!\")\n","\n","test_frames = np.array(test_frames).reshape(1, len(test_frames), 32, 32, 3)\n","\n","prediction = model.predict(test_frames)\n","predicted_class = \"Drowsy\" if prediction[0][0] > 0.5 else \"Non Drowsy\"\n","\n","print(f\"Predicted class: {predicted_class} (Confidence: {prediction[0][0]:.2f})\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tYvILTw0PYzj","executionInfo":{"status":"ok","timestamp":1742569942623,"user_tz":-120,"elapsed":71,"user":{"displayName":"Azza abdelaziz","userId":"08770813708774899615"}},"outputId":"fbe293f6-be18-4354-ae7c-2500fd390f58"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Testing on video: V0395.png (Actual: Drowsy)\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 53ms/step\n","Predicted class: Drowsy (Confidence: 1.00)\n"]}]},{"cell_type":"code","source":["test_video = os.path.join(data_path, \"Non Drowsy\", os.listdir(os.path.join(data_path, \"Non Drowsy\"))[0])"],"metadata":{"id":"FkL6ZhpzQJ44","executionInfo":{"status":"ok","timestamp":1742569955629,"user_tz":-120,"elapsed":48,"user":{"displayName":"Azza abdelaziz","userId":"08770813708774899615"}}},"execution_count":14,"outputs":[]}]}